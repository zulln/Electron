"use strict";

var gulp = require("gulp");
var plugins = require("gulp-load-plugins")();
var runSequence = require("run-sequence");
var combiner = require("stream-combiner2");
var del = require("del");
var karma = require("karma").server;
var htmlMinifier = require("html-minifier").minify;

var IS_DEV = plugins.util.env.dev || false;
var IS_WATCHING = plugins.util.env._.indexOf("watch") > -1;

var handleError = function (error) {
	plugins.util.log(plugins.util.colors.red("error:"), "(" + error.plugin + ", " + error.name + ")", error.message);
	IS_WATCHING ? this.emit("end") : process.exit(1);
};

var handleTestError = function (callback) {
	return function (exitCode) {
		callback(IS_WATCHING ? 0 : exitCode);
	}
};

// Config

var config = {
	autoprefixer: ["last 2 versions", "ie >= 9", "Firefox ESR"],
	cssBase64: {
		baseDir: "./",
		extensions: ["woff"],
		debug: true
	},
	karma: {
		file: __dirname + "/config/karma.js",
		browsers: ["PhantomJS", "Chrome", "Firefox"]
	},
	eslint: "./config/eslint.json",
	htmlhint: require("./config/htmlhint.js"),
	fileInclude: {
		inlineTemplates: {
			filters: {
				inlineTemplate: function(content) {
					// Must at least remove all new lines.
					var minified = htmlMinifier(content, {
						collapseWhitespace: true
					});
					// Escape so it can be stored in a JS string,
					// and trim the surrounding quotes added by stringify.
					minified = JSON.stringify(minified).slice(1, -1);
					return minified;
				}
			}
		}
	}
};

var src = {
	css: {
		dir: "src/css/",
		files: "src/css/**/*.scss"
	},
	js: {
		files: "src/js/**/!(*.specs).js"
	},
	html: {
		templates: "src/js/**/*.html"
	}
};

var dest = "dist/";

// Tasks

gulp.task("default", function(callback) {
	runSequence(
		"clean",
		["css", "js"],
		"test",
		callback
	);
});

gulp.task("watch", ["default"], function() {
	gulp.watch(src.css.files, ["css"]);
	gulp.watch([src.js.files, src.html.templates], ["js"]);
});

gulp.task("clean", function(callback) {
	del(dest, callback);
});

gulp.task("css", function() {
	return combiner.obj(
		// TODO(kenneth): gulp-ruby-sass will not throw an error on SASS syntax errors: https://github.com/sindresorhus/gulp-ruby-sass/issues/209
		plugins.rubySass(src.css.dir, {stopOnError: true, sourcemap: true}),
			plugins.bytediff.start(),
				plugins.base64(config.cssBase64),
				plugins.autoprefixer.apply(this, config.autoprefixer),
				plugins.if(!IS_DEV, plugins.minifyCss()),
				plugins.rename({suffix: ".min"}),
			plugins.bytediff.stop(),
			plugins.sourcemaps.write("./", {sourceRoot: src.css.dir}),
		gulp.dest(dest)
	).on("error", handleError);
});

gulp.task("js", ["html"], function () {
	return combiner.obj(
		gulp.src(src.js.files),
			plugins.ngAnnotate(),
			plugins.fileInclude(config.fileInclude.inlineTemplates),
			plugins.eslint(config.eslint),
			plugins.eslint.format(),
			plugins.if(!IS_WATCHING, plugins.eslint.failAfterError()),
		gulp.dest(dest)
	).on("error", handleError);
});

gulp.task("html", function () {
	return combiner.obj(
		gulp.src(src.html.templates),
			plugins.htmlhint(config.htmlhint.partials),
			plugins.if(IS_WATCHING, plugins.htmlhint.reporter(), plugins.htmlhint.failReporter())
	).on("error", handleError);
});

gulp.task("test", function(callback) {
	karma.start({
		configFile: config.karma.file
	}, handleTestError(callback))
});

gulp.task("test-all", function(callback) {
	karma.start({
		configFile: config.karma.file,
		browsers: config.karma.browsers
	}, handleTestError(callback))
});

gulp.task("test-watch", function(callback) {
	karma.start({
		configFile: config.karma.file,
		autoWatch: true,
		singleRun: false
	}, handleTestError(callback))
});

gulp.task("test-all-watch", function(callback) {
	karma.start({
		configFile: config.karma.file,
		autoWatch: true,
		singleRun: false,
		browsers: config.karma.browsers
	}, handleTestError(callback))
});
