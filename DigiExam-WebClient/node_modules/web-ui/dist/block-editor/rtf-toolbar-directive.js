(function iife() {
	"use strict";

	// NOTE(kenneth): This is based on how "scribe-plugin-toolbar" is implemented.
	// https://github.com/guardian/scribe-plugin-toolbar/
	// We must use this directive instead of that plugin because the toolbar will
	// be stickied which creates a clone of the toolbar element and that doesn't
	// work with the original toolbar plugin.

	angular.module("dx.webui.blockEditor").directive("dxRtfToolbar", rtfToolbarDirective);

	function rtfToolbarDirective() {
		var directive = {
			restrict: "E",
			scope: {
				scribe: "=",
				keyboardShortcutLabels: "=",
			},
			controllerAs: "vm",
			template: "<div class=\"blockEditor_toolbar\" tabindex=\"0\" dx-toolbar dx-toolbar-nowrap layout-align=\"start start\"><div dx-toolbar><div dx-toolbar-group><button data-command-name=\"bold\" title=\"Bold ({{keyboardShortcutLabels.bold}})\"><i dx-icon=\"bold\"></i></button> <button data-command-name=\"italic\" title=\"Italic ({{keyboardShortcutLabels.italic}})\"><i dx-icon=\"italic\"></i></button> <button data-command-name=\"underline\" title=\"Underline ({{keyboardShortcutLabels.underline}})\"><i dx-icon=\"underline\"></i></button></div><div dx-toolbar-group><button data-command-name=\"h1\" title=\"Heading 1 ({{keyboardShortcutLabels.h1}})\"><i dx-icon=\"h1\"></i></button> <button data-command-name=\"h2\" title=\"Heading 2 ({{keyboardShortcutLabels.h2}})\"><i dx-icon=\"h2\"></i></button> <button data-command-name=\"h3\" title=\"Heading 3 ({{keyboardShortcutLabels.h3}})\"><i dx-icon=\"h3\"></i></button> <button data-command-name=\"h4\" title=\"Heading 4 ({{keyboardShortcutLabels.h4}})\"><i dx-icon=\"h4\"></i></button> <button data-command-name=\"h5\" title=\"Heading 5 ({{keyboardShortcutLabels.h5}})\"><i dx-icon=\"h5\"></i></button> <button data-command-name=\"h6\" title=\"Heading 6 ({{keyboardShortcutLabels.h6}})\"><i dx-icon=\"h6\"></i></button></div><div dx-toolbar-group><button data-command-name=\"insertOrderedList\" title=\"Numbered list ({{keyboardShortcutLabels.insertOrderedList}})\"><i dx-icon=\"list-number\"></i></button> <button data-command-name=\"insertUnorderedList\" title=\"Bullet list ({{keyboardShortcutLabels.insertUnorderedList}})\"><i dx-icon=\"list-disc\"></i></button></div><div dx-toolbar-group><button data-command-name=\"removeFormat\" title=\"Remove formatting ({{keyboardShortcutLabels.removeFormat}})\"><i dx-icon=\"remove-formatting\"></i></button></div></div><div dx-toolbar-spacer></div><div dx-toolbar-group dx-toolbar-noshrink><button data-command-name=\"undo\" title=\"Undo ({{keyboardShortcutLabels.undo}})\"><i dx-icon=\"undo\"></i></button> <button data-command-name=\"redo\" title=\"Redo ({{keyboardShortcutLabels.redo}})\"><i dx-icon=\"redo\"></i></button></div></div>",
			link: link,
		};

		function link($scope, $element) {
			var $buttons = $element.find("[data-command-name]");

			$scope.$watch("scribe", bindUpdateUi);
			$buttons.on("click", executeCommand);

			function executeCommand() {
				if ($scope.scribe) {
					var command = $scope.scribe.getCommand(this.getAttribute("data-command-name"));
					$scope.scribe.el.focus();
					command.execute(this.getAttribute("data-command-value"));
				}
			}

			function bindUpdateUi() {
				$scope.scribe.el.addEventListener("keyup", updateUi);
				$scope.scribe.el.addEventListener("mouseup", updateUi);
				$scope.scribe.el.addEventListener("focus", updateUi);
				$scope.scribe.el.addEventListener("blur", updateUi);
				$scope.scribe.on("content-changed", updateUi);
			}

			function updateUi() {
				$buttons.each(updateButton);
			}

			function updateButton() {
				var command = $scope.scribe.getCommand(this.getAttribute("data-command-name"));
				var selection = new $scope.scribe.api.Selection();

				if (selection.range && command.queryState(this.getAttribute("data-command-value"))) {
					this.classList.add("active");
				} else {
					this.classList.remove("active");
				}

				if (selection.range && command.queryEnabled()) {
					this.removeAttribute("disabled");
				} else {
					this.setAttribute("disabled", "disabled");
				}
			}
		}

		return directive;
	}
}());
