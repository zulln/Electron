describe("detectPlatform", function() {
	"use strict";

	var detectPlatform;
	var $window;

	function getNavigatorPlatformTest(platformValue, returnedValue) {
		return function navigatorPlatformTest() {
			$window.navigator.platform = platformValue;
			expect(detectPlatform()).toBe(returnedValue);
		}
	}

	beforeEach(function() {
		$window = {
			navigator: {
				platform: "",
				userAgent: ""
			}
		};

		module("dx.webui.detection");

		module(function($provide) {
			$provide.value("$window", $window);
		});

		inject(function($injector) {
			detectPlatform = $injector.get("detectPlatform");
		});
	});

	it("returns `undefined` if it chould not detect the platform", function () {
		$window.navigator.platform = "g-i-b-b-e-r-i-s-h-!";
		expect(detectPlatform()).toBeUndefined();
	});

	it("uses the cached result by default", function () {
		var first = "win";
		var second = "mac";
		$window.navigator.platform = first;
		expect(detectPlatform()).toBe(first);
		$window.navigator.platform = second;
		expect(detectPlatform()).toBe(first);
	});

	it("uses the cached result if explicitly asked to", function () {
		var first = "win";
		var second = "mac";
		$window.navigator.platform = first;
		expect(detectPlatform()).toBe(first);
		$window.navigator.platform = second;
		expect(detectPlatform(true)).toBe(first);
	});

	it("does not use the cached result if explicitly asked not to", function () {
		var first = "win";
		var second = "mac";
		$window.navigator.platform = first;
		expect(detectPlatform()).toBe(first);
		$window.navigator.platform = second;
		expect(detectPlatform(false)).toBe(second);
	});

	it("returns the value of `window.DX.flags.platform` if it is not undefined", function () {
		var platform = "foobar";
		$window.DX = {};
		expect(detectPlatform()).toBeUndefined();
		$window.DX.flags = {};
		expect(detectPlatform()).toBeUndefined();
		$window.DX.flags.platform = platform;
		expect(detectPlatform()).toBe(platform);
	});

	describe("Windows", function () {
		it("is detected when `navigator.platform` is `Windows`", getNavigatorPlatformTest("Windows", "win"));
		it("is detected when `navigator.platform` is `Win16`", getNavigatorPlatformTest("Win16", "win"));
		it("is detected when `navigator.platform` is `Win32`", getNavigatorPlatformTest("Win32", "win"));
		it("is detected when `navigator.platform` is `Win64`", getNavigatorPlatformTest("Win64", "win"));
		it("is detected when `navigator.platform` is `WinCE`", getNavigatorPlatformTest("WinCE", "win"));
	});

	describe("Mac", function () {
		it("is detected when `navigator.platform` is `Macintosh`", getNavigatorPlatformTest("Macintosh", "mac"));
		it("is detected when `navigator.platform` is `MacIntel`", getNavigatorPlatformTest("MacIntel", "mac"));
		it("is detected when `navigator.platform` is `MacPPC`", getNavigatorPlatformTest("MacPPC", "mac"));
		it("is detected when `navigator.platform` is `Mac68k`", getNavigatorPlatformTest("Mac68k", "mac"));
	});

	describe("Linux", function () {
		it("is detected when `navigator.platform` is `Linux`", getNavigatorPlatformTest("Linux", "linux"));
		it("is detected when `navigator.platform` is `Linux i686`", getNavigatorPlatformTest("Linux i686", "linux"));
		it("is detected when `navigator.platform` is `Linux x86_64`", getNavigatorPlatformTest("Linux x86_64", "linux"));
	});

	describe("ChromeOS", function () {
		it("is detected when `navigator.userAgent` contains `CrOS`", function () {
			$window.navigator.userAgent = "Mozilla/5.0 (X11; CrOS armv7l 6680.64.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36";
			expect(detectPlatform()).toBe("chromeos");
		});

		it("is not detected when `navigator.userAgent` contains `Chrome` but not `CrOS`", function () {
			$window.navigator.userAgent = "Mozilla/5.0 (X11; Intel armv7l 6680.64.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.89 Safari/537.36";
			expect(detectPlatform()).toBeUndefined();
		});
	});

	describe("iOS", function () {
		it("is detected when `navigator.platform` is `iPhone`", getNavigatorPlatformTest("iPhone", "ios"));
		it("is detected when `navigator.platform` is `iPod`", getNavigatorPlatformTest("iPod", "ios"));
		it("is detected when `navigator.platform` is `iPad`", getNavigatorPlatformTest("iPhone", "ios"));
		it("is detected when `navigator.platform` is `iPhone Simulator`", getNavigatorPlatformTest("iPhone Simulator", "ios"));
		it("is detected when `navigator.platform` is `iPod Simulator`", getNavigatorPlatformTest("iPod Simulator", "ios"));
		it("is detected when `navigator.platform` is `iPad Simulator`", getNavigatorPlatformTest("iPhone Simulator", "ios"));
	});
});
