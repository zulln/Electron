describe("getKeyboardShortcutChecker", function() {
	"use strict";

	var getKeyboardShortcutChecker;
	var config;
	var event;

	var A_KEY_CODE = 65;
	var B_KEY_CODE = 66;

	beforeEach(function() {
		module("dx.webui.keyboard");
		inject(function($injector) {
			getKeyboardShortcutChecker = $injector.get("getKeyboardShortcutChecker");
		});
	});

	beforeEach(function () {
		config = {};
		event = {};
	});

	it("returns a function", function () {
		var result = getKeyboardShortcutChecker(config);
		expect(typeof result).toBe("function");
	});

	describe("returned function", function () {
		it("returns `false` if it does not match a key", function () {
			config.modifiersAND = [];
			config.keysOR = ["does not exist"];
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(false);
		});

		it("returns `false` if it does not match a modifier and a key", function () {
			config.modifiersAND = ["does not exist"];
			config.keysOR = ["does not exist"];
			event.ctrlKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(false);
		});

		it("matches a single key", function () {
			config.modifiersAND = [];
			config.keysOR = ["a"];
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches either of two keys", function () {
			config.modifiersAND = [];
			config.keysOR = ["a", "b"];
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
			event.keyCode = B_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches a modifier and a key", function () {
			config.modifiersAND = ["ctrl"];
			config.keysOR = ["a"];
			event.ctrlKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches multiple modifiers and a key", function () {
			config.modifiersAND = ["ctrl", "shift"];
			config.keysOR = ["a"];
			event.ctrlKey = true;
			event.shiftKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches ctrl modifier", function () {
			config.modifiersAND = ["ctrl"];
			config.keysOR = ["a"];
			event.ctrlKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches shift modifier", function () {
			config.modifiersAND = ["shift"];
			config.keysOR = ["a"];
			event.shiftKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches alt modifier", function () {
			config.modifiersAND = ["alt"];
			config.keysOR = ["a"];
			event.altKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});

		it("matches meta modifier", function () {
			config.modifiersAND = ["meta"];
			config.keysOR = ["a"];
			event.metaKey = true;
			event.keyCode = A_KEY_CODE;
			expect(getKeyboardShortcutChecker(config)(event)).toBe(true);
		});
	});
});
