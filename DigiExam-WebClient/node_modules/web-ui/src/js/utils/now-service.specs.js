describe("now", function () {
	"use strict";

	var now;
	var $window;

	beforeEach(function() {
		module("dx.webui.utils");
	});

	afterEach(function() {
		now = null;
		$window = null;
	});

	it("uses `$window.performance.now` when it is available", function() {
		var mockWindow = {
			performance: {
				now: function() {},
			},
		};

		// NOTE(kenneth): PhantomJS 1.x does not support Function.prototype.bind.
		// Using a no-op since we will spy on bind and just return the now function.
		if (!mockWindow.performance.now.bind) {
			mockWindow.performance.now.bind = function() {};
		}

		// Return the now function instead of calling through to bind so it's easier
		// to verify the service factory return value.
		var bindSpy = spyOn(mockWindow.performance.now, "bind").and.returnValue(mockWindow.performance.now);

		// Make sure $window.performance exists.
		module(function($provide) {
			$provide.value("$window", mockWindow);
		});

		inject(function($injector) {
			$window = $injector.get("$window");
			now = $injector.get("now");
		});

		expect(bindSpy).toHaveBeenCalledWith($window.performance);
		expect(now).toBe($window.performance.now);
	});

	it("uses `Date.now` when `$window.performance.now` is not available", function() {
		// Removes $window.performance if it should exist.
		module(function($provide) {
			$provide.value("$window", {});
		});

		inject(function($injector) {
			now = $injector.get("now");
		});

		expect(now).toBe(Date.now);
	});
});
