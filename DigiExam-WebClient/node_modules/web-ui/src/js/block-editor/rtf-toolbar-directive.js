(function iife() {
	"use strict";

	// NOTE(kenneth): This is based on how "scribe-plugin-toolbar" is implemented.
	// https://github.com/guardian/scribe-plugin-toolbar/
	// We must use this directive instead of that plugin because the toolbar will
	// be stickied which creates a clone of the toolbar element and that doesn't
	// work with the original toolbar plugin.

	angular.module("dx.webui.blockEditor").directive("dxRtfToolbar", rtfToolbarDirective);

	function rtfToolbarDirective() {
		var directive = {
			restrict: "E",
			scope: {
				scribe: "=",
				keyboardShortcutLabels: "=",
			},
			controllerAs: "vm",
			template: "@@include(inlineTemplate('rtf-toolbar-directive.html'))",
			link: link,
		};

		function link($scope, $element) {
			var $buttons = $element.find("[data-command-name]");

			$scope.$watch("scribe", bindUpdateUi);
			$buttons.on("click", executeCommand);

			function executeCommand() {
				if ($scope.scribe) {
					var command = $scope.scribe.getCommand(this.getAttribute("data-command-name"));
					$scope.scribe.el.focus();
					command.execute(this.getAttribute("data-command-value"));
				}
			}

			function bindUpdateUi() {
				$scope.scribe.el.addEventListener("keyup", updateUi);
				$scope.scribe.el.addEventListener("mouseup", updateUi);
				$scope.scribe.el.addEventListener("focus", updateUi);
				$scope.scribe.el.addEventListener("blur", updateUi);
				$scope.scribe.on("content-changed", updateUi);
			}

			function updateUi() {
				$buttons.each(updateButton);
			}

			function updateButton() {
				var command = $scope.scribe.getCommand(this.getAttribute("data-command-name"));
				var selection = new $scope.scribe.api.Selection();

				if (selection.range && command.queryState(this.getAttribute("data-command-value"))) {
					this.classList.add("active");
				} else {
					this.classList.remove("active");
				}

				if (selection.range && command.queryEnabled()) {
					this.removeAttribute("disabled");
				} else {
					this.setAttribute("disabled", "disabled");
				}
			}
		}

		return directive;
	}
}());
