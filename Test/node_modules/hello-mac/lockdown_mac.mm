// lockdown_mac.mm
#include <node.h>
//#import "./screenshot/screenshot.h"
#import "usbNotifier.h"

using namespace v8;

	namespace lockdown {

	usbNotifier *notifier;

	void PrepareLockdown(const FunctionCallbackInfo<Value>& args) {
		NSLog(@"&p", args);
		notifier = [[usbNotifier alloc] initWithCallback:args];
		[notifier runTask];
	}

	void ExecuteLockdown(const FunctionCallbackInfo<Value>& args) {

	}

	void OnLockdown(const FunctionCallbackInfo<Value>& args) {
		//SetKiosk(true);
		Isolate* isolate = Isolate::GetCurrent();
		HandleScope scope(isolate);



		args.GetReturnValue().Set(v8::Boolean::New(isolate, true));
	}

	//void TeardownLockdown(const FunctionCallbackInfo<Value>& args) {
	void TeardownLockdown()
	{
		//SetKiosk(false);
		[notifier stopTask];
	}

	void init(Handle<Object> exports) {
		NODE_SET_METHOD(exports, "prepareLockdown", PrepareLockdown);
		NODE_SET_METHOD(exports, "executeLockdown", ExecuteLockdown);
		NODE_SET_METHOD(exports, "onLockdown", OnLockdown);
		NODE_SET_METHOD(exports, "teardownLockdown", TeardownLockdown);
	}

	NODE_MODULE(dxlockdown, init)
}
