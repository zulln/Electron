// lockdown_mac.mm
#include <node.h>
#import "./screenshot/screenshot.h"

using namespace v8;

void PrepareLockdown(const FunctionCallbackInfo<Value>& args) {

}

void ExecuteLockdown(const FunctionCallbackInfo<Value>& args) {

}

void OnLockdown(const FunctionCallbackInfo<Value>& args) {
	//SetKiosk(true);
	Isolate* isolate = Isolate::GetCurrent();
	HandleScope scope(isolate);

	ScreenShot_DetectorAppDelegate *delegate = [[ScreenShot_DetectorAppDelegate alloc] init];
	[delegate run];
	//[delegate ]

	args.GetReturnValue().Set(v8::Boolean::New(isolate, true));
}

void TeardownLockdown(const FunctionCallbackInfo<Value>& args) {
	//SetKiosk(false);
}

void init(Handle<Object> exports) {
	NODE_SET_METHOD(exports, "prepareLockdown", PrepareLockdown);
	NODE_SET_METHOD(exports, "executeLockdown", ExecuteLockdown);
	NODE_SET_METHOD(exports, "onLockdown", OnLockdown);
	NODE_SET_METHOD(exports, "teardownLockdown", TeardownLockdown);
}

NODE_MODULE(dxlockdown, init)
