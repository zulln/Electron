//
//  usbNotifier.m
//  USBDetector
//
//  Created by Amar Krupalija on 19/11/15.
//  Copyright Â© 2015 Amar Krupalija. All rights reserved.
//

#import "usbNotifier.h"

@implementation usbNotifier
@synthesize nsNotificate;

struct callbackStruct {
	const FunctionCallbackInfo<Value>& cbArgs;
};

NSString *mountPath;
Local<Function> temp;
Persistent<Function> persistentCallback;
Isolate* isolate;
//Isolate *isolate;
const unsigned argc = 1;

- (void)returnValue
{
    NSLog(@"Persistent to local");
    const unsigned argc = 2;
    isolate = Isolate::GetCurrent();
    //Locker Locker(isolate);
    Local<Value> argv[argc] = { String::NewFromUtf8(isolate, "RetVal"), String::NewFromUtf8(isolate, "success") };
    Local<Function> call = Local<Function>::New(isolate, persistentCallback);
    call->Call(isolate->GetCurrentContext()->Global(), argc, argv);
    persistentCallback.Reset();
}

- (void)runTask:(const FunctionCallbackInfo<Value>&)args
//- (void)runTask
{
    //Isolate *isolate = Isolate::GetCurrent();
    //HandleScope scope(isolate);
    //callback.Reset(isolate, args[0].As<Function>());
    //cb = Persistent<Function>::New(Isolate::GetCurrent(), args[0].As<Function>);
   isolate = Isolate::GetCurrent();
   NSLog(@"Isolate adress: %p", &isolate);
   Handle<Function> callbackFunc = Handle<Function>::Cast(args[0]);
   persistentCallback.Reset(Isolate::GetCurrent(), callbackFunc);
    SEL didMountMethod = @selector(didMountMethod:);
    SEL didUnmountMethod = @selector(didUnmountMethod:);

	nsNotificate = [[NSWorkspace sharedWorkspace] notificationCenter];
    
	[nsNotificate addObserver:self selector:didMountMethod name:NSWorkspaceDidMountNotification object:nil];
    [nsNotificate addObserver:self selector:didUnmountMethod name:NSWorkspaceDidUnmountNotification object:nil];
    [self returnValue];
	//Local<Value> argv[argc] = { String::NewFromUtf8(isolate, "hello world") };
  	//callback->Call(isolate->GetCurrentContext()->Global(), argc, argv);

	//NSLog(@"CB runTask: %p", &cb);
}

- (void)didMountMethod:(NSNotification *)notification
{
	mountPath = [[NSString alloc] initWithUTF8String:[[notification userInfo][@"NSDevicePath"] UTF8String]];
    //[NSThread exit];
    [self returnValue];
}

- (void)didUnmountMethod:(NSNotification *)notification
{
	mountPath = [[NSString alloc] initWithUTF8String:[[notification userInfo][@"NSDevicePath"] UTF8String]];
    //[NSThread exit];
}

- (void)stopTask:(const FunctionCallbackInfo<Value>&)args
{
	[nsNotificate removeObserver:self name:NSWorkspaceDidMountNotification object:nil];
	[nsNotificate removeObserver:self name:NSWorkspaceDidUnmountNotification object:nil];

    NSLog(@"Stopping RunLoop");
	//[self unpack_location];
	args.GetReturnValue().Set(String::NewFromUtf8(args.GetIsolate(), "Stopping Task from Objective-C"));

}

@end
